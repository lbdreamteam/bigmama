var express = require('express')
  , app = express(app)
  , server = require('http').createServer(app);

// serve static files from the current directory
app.use(express.static(__dirname));

//we'll keep clients data here
var clients = {};

//get EurecaServer class
var EurecaServer = require('eureca.io').EurecaServer;

//create an instance of EurecaServer
var eurecaServer = new EurecaServer({ allow: ['setId', 'UpdatePosition', 'createPlayer'] });

//attach eureca.io to our http server
eurecaServer.attach(server);

//eureca.io provides events to detect clients connect/disconnect

//detect client connection
eurecaServer.onConnect(function (conn) {
    console.log('New Client id=%s ', conn.id, conn.remoteAddress);

    //the getClient method provide a proxy allowing us to call remote client functions
    var remote = eurecaServer.getClient(conn.id);

    //register the client
    clients[conn.id] = { id: conn.id, remote: remote, state: { x: 0, y: 0 } };

    //here we call setId (defined in the client side)
    remote.setId(conn.id);
});

//detect client disconnection
eurecaServer.onDisconnect(function (conn) {
    console.log('Client disconnected ', conn.id);

    var removeId = clients[conn.id].id;

    delete clients[conn.id];

    for (var c in clients) {
        var remote = clients[c].remote;

        //here we call kill() method defined in the client side
        //remote.kill(conn.id);
    }
});

eurecaServer.exports.ClientManagement = (function () {

    var player = (function () {

        function spawn(clientId) {
            clients[clientId].state.x = 50;
            clients[clientId].state.y = 50;

            clients[clientId].remote.createPlayer(clients[clientId].state.x, clients[clientId].state.y);
        };
<<<<<<< local
        var k = 5000;
=======

>>>>>>> other
        function sendInput(input, clientId, deltatime, callId) {
            if (input.left) {
<<<<<<< local
                clients[clientId].state.x -= k * deltatime;
=======
                clients[clientId].state.x -= 5 * deltatime;
>>>>>>> other
                
            }
            else if (input.right) {
<<<<<<< local
                clients[clientId].state.x += k * deltatime;
=======
                clients[clientId].state.x += 5 * deltatime;
>>>>>>> other
            }
            else if (input.up) {
<<<<<<< local
                clients[clientId].state.y -= k * deltatime;
=======
                clients[clientId].state.y -= 5 * deltatime;
>>>>>>> other
            }
            else if (input.down) {
<<<<<<< local
                clients[clientId].state.y += k * deltatime;
=======
                clients[clientId].state.y += 5 * deltatime;
>>>>>>> other
            }

            //Controllare UpdatePosition
<<<<<<< local
            clients[clientId].remote.UpdatePosition(clients[clientId].state.x, clients[clientId].state.y, callId);
=======
            clients[clientId].remote.updatePlayerPosition(clients[clientId].state.x, clients[clientId].state.y, callId);
>>>>>>> other

            console.log('Count: '+ callId + ' - ' + clients[clientId].state.x + '   ' + clients[clientId].state.y);
        };

        return {
            Spawn: spawn,
            SendInput: sendInput
        };
    }());

    return {
        Player : player
    };
}());


server.listen(8001);