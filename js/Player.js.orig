var callCounter = 0,
    calls = { 'calls': [] };

/* Costruttore della classe Player:
    params:
        -game: ;
        -eurecaServer: ;
        -id: ;
        -x: ;
        -y: ;
        -graph: nome dell'oggetto Phaser inizializzato.
*/    
<<<<<<< local
var timerText;
=======
var timerText,
    myEurecaClient;
>>>>>>> other
Player = function (game, eurecaServer, eurecaClient, id, x, y) {
    Phaser.Sprite.call(this, game, x, y);

    this.game = game;
    //Grafica caricata in game nel preloader!
    this.player = this.game.add.sprite(x, y, 'player');
    this.player.animations.add('walk');
    this.game.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.eurecaServer = eurecaServer;
<<<<<<< local
    this.myEurecaClient = eurecaClient;
=======
    myEurecaClient = eurecaClient;
>>>>>>> other
    this.id = id;

<<<<<<< local
    this.myEurecaClient.exports.UpdatePosition = function (x, y, callId) {
        player.player.x = x;
        player.player.y = y;
    };

=======
>>>>>>> other
    //Temporaneo
    timerText = this.game.add.text(15, 20, "X e Y: ", { font: "24px Arial", fill: "#333333" });
};

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

Player.prototype.update = function (cursors, deltatime) {
    if (cursors.left.isDown || cursors.right.isDown || cursors.up.isDown || cursors.down.isDown)
    {
        var input = { 'left': cursors.left.isDown, 'right': cursors.right.isDown, 'up': cursors.up.isDown, 'down': cursors.down.isDown };
        callCounter++;
        calls.calls[callCounter] = { 'id': callCounter, 'input': input, 'deltatime': deltatime };
        this.eurecaServer.ClientManagement.Player.SendInput(input, this.id, deltatime, callCounter);
    }

    //Costante per la velocità
<<<<<<< local
    var k = 5000;
=======
    var k = 5;
>>>>>>> other

    if (cursors.up.isDown) {
        this.player.y -= k * deltatime;
    }
    else if (cursors.down.isDown) {

        this.player.y += k * deltatime;
    }
    else if (cursors.left.isDown) {
        if (this.player.scale.x > 0)
        {
            this.player.scale.x *= -1;
        }
        this.player.play('walk', 20, true);
        this.player.x -= k * deltatime;
    }
    else if (cursors.right.isDown) {
        if (this.player.scale.x < 0) {
            this.player.scale.x *= -1;
        }
        this.player.play('walk', 20, true);
        this.player.x += k * deltatime;
    }
    else {
        this.player.animations.stop();
    }
<<<<<<< local
    timerText.setText('X e Y: ' + this.player.x + ' ' + this.player.y + ' deltatime: ' + deltatime);
=======
    timerText.setText('X e Y: ' + this.player.x + ' ' + this.player.y);
>>>>>>> other

    
}

<<<<<<< local
////Controllare UpdatePosition
//myEurecaClient.exports.UpdatePosition = function (x, y, callId) {
    
//};

=======
//Controllare UpdatePosition
>>>>>>> other
//myEurecaClient.exports.PlayerManagement = (function () {

//    function updatePosition(x, y, callId) {
//        player.player.x = x;
//        player.player.y = y;
//    };

//    return {
//        UpdatePosition: updatePosition
//    };
//}());